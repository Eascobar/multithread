MultiThread 
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>

// Variables that hold the final results, integer data type for simplicity. Do not change these variables.
int avgNum;
int minNum;
int maxNum;

// Functions' declaration. Definition is at the bottom. Do not change the declaration of these functions.
void *avgfunc(void *param);
void *minfunc(void *param);
void *maxfunc(void *param);

int main(int argc, char* argv[])
{
    int i;
    int numArgs = argc - 1; // Number of arguments passed (excluding the program name)

    // Ensure that we have at least three arguments
    if (numArgs < 3) {
        printf("Error: You must provide at least three integers.\n");
        return 1;
    }

    // Dynamically allocate an array to store the numbers passed as command line arguments
    int *nums = (int *)malloc(numArgs * sizeof(int));

    // Parse command line arguments and store them in the nums array
    for (i = 1; i <= numArgs; i++) {
        nums[i-1] = atoi(argv[i]);
    }

    // Thread IDs and attributes
    pthread_t threads[3];
    pthread_attr_t attr;
    void *status;

/* Initialize thread attributes */
pthread_attr_init(&attr);
pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);

/* Create threads */
pthread_create(&threads[0], &attr, avgfunc, (void *)nums);
pthread_create(&threads[1], &attr, minfunc, (void *)nums);
pthread_create(&threads[2], &attr, maxfunc, (void *)nums);


/* Wait for threads to exit */
for (i = 0; i < 3; i++) {
        pthread_join(threads[i], &status);
    }

// Printing the results. Do not change this line
printf("%d %d %d", avgNum, minNum, maxNum);
}

void *avgfunc(void *param)
{
    /* Write the code to calculate the average value and store it in avgNum variable. */
    /* Hint: the numbers supplied on the command line as arguments are passed to this function through the pointer param. You need to find a way to access
    these numbers through the pointer param */ 
  int *nums = (int *)param;
    int numArgs = sizeof(nums) / sizeof(nums[0]);
    int sum = 0;
    int i;

    for (i = 0; i < numArgs; i++) {
        sum += nums[i];
    }

    avgNum = sum / numArgs;

    pthread_exit(NULL);
}

void *minfunc(void *param)
{  
    /* Write the code to calculate the minimum value and store it in minNum variable */
    /* Hint: the numbers supplied on the command line as arguments are passed to this function through the pointer param. You need to find a way to access
    these numbers through the pointer param */ 
 int *nums = (int *)param;
    int numArgs = sizeof(nums) / sizeof(nums[0]);
    int minVal = nums[0];
    int i;

    for (i = 1; i < numArgs; i++) {
        if (nums[i] < minVal) {
            minVal = nums[i];
        }
    }

    minNum = minVal;

    pthread_exit(NULL);
 
}

void *maxfunc(void *param)
{
    /* Write the code to calculate the maximum value and store it in maxNum variable */
    /* Hint: the numbers supplied on the command line as arguments are passed to this function through the pointer param. You need to find a way to access
    these numbers through the pointer param */ 
 {
    int *nums = (int *)param;
    int numArgs = sizeof(nums) / sizeof(nums[0]);
    int maxVal = nums[0];
    int i;

    for (i = 1; i < numArgs; i++) {
        if (
 
}
